source('~/Documents/R/NACC/paper/figures-V3/Figure2/R/main.R', echo=TRUE)
load("../data/500cells-2021-01-28.rda")
load("../data/1000cells-2021-01-28.rda")
load("../data/2000cells-2021-01-28.rda")
x <- seq(0, 0.15, length.out = 50)
plot.df <- data.frame(de = rep(x, 3), vals = c(cls500$singvals, cls1000$singvals, cls2000$singvals),
angles = c(cls500$angles, cls1000$angles, cls2000$angles), ratio = c(rep("0.5", 50), rep("1", 50), rep("2", 50)))
df.small <- plot.df[(abs(plot.df$de - 0.1) == min(abs(plot.df$de - 0.1)) & plot.df$ratio == "0.5") |
(abs(plot.df$de - 0.03) == min(abs(plot.df$de - 0.03)) & plot.df$ratio == "0.5") ,]
cls <- c("0.5" = "olivedrab3", "1" = "plum3", "2" = "lightblue2")
source('~/Documents/R/NACC/paper/figures-V3/Figure2/R/Figure2B.R', echo=TRUE)
load("../data/500cells-2021-01-28.rda")
load("../data/1000cells-2021-01-28.rda")
load("../data/2000cells-2021-01-28.rda")
x <- seq(0, 0.15, length.out = 50)
plot.df <- data.frame(de = rep(x, 3), vals = c(cls500$singvals, cls1000$singvals, cls2000$singvals),
angles = c(cls500$angles, cls1000$angles, cls2000$angles), ratio = c(rep("0.5", 50), rep("1", 50), rep("2", 50)))
df.small <- plot.df[(abs(plot.df$de - 0.1) == min(abs(plot.df$de - 0.1)) & plot.df$ratio == "0.5") |
(abs(plot.df$de - 0.03) == min(abs(plot.df$de - 0.03)) & plot.df$ratio == "0.5") ,]
cls <- c("0.5" = "olivedrab3", "1" = "plum3", "2" = "lightblue2")
p <- ggplot(plot.df, aes(x = vals, y = angles, colour = ratio)) +
geom_point(size = 0.5, alpha = 1) + geom_line() + xlab("Largest singular values") + ylab("SIGMA") +
geom_point(data = df.small, colour = "red", size = 1.2, shape = 1) +
scale_y_continuous(breaks = seq(-0.4, 1, by = 0.2)) +
scale_color_manual(values = cls) + labs(colour = "cell to gene ratio") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.2,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = c(0.85, 0.2),
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Helvetica"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Helvetica", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_text(family = "Helvetica", colour = "black"),
legend.text = element_text(family = "Helvetica"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent",colour = NA))
cairo_pdf("plots/figure2B.pdf", width = 7/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
source('~/Documents/R/NACC/paper/figures-V3/Supplementary_Figure1/R/main.R', echo=TRUE)
group.prob <- c(0.7, 0.3)
group.prob <- group.prob/sum(group.prob)
params <- newSplatParams()
params <- setParams(params, update = list(nGenes = 1000, batchCells = 500, group.prob = group.prob, path.nonlinearProb = 0, out.prob = 0.1,
dropout.type = "none", lib.loc = 11, de.downProb = 0.5,
de.prob = 0.025, seed = 3, de.facLoc = 0.05, de.facScale = 0.3))
splatO <- splatSimulateGroups(params)
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
out <- angle_per_cluster(expr = expr.norm.log, clusters = rep("1", ncol(expr.norm.log)), exclude = data.frame(clsm = log(colSums(expr) + 1)))
L <- out$rmt_out$`1`
actual_cluster <- splatO$Group
cl.unique <- unique(actual_cluster)
prob.mat <- matrix(0, nrow = length(actual_cluster), ncol = length(cl.unique))
for(i in 1:length(cl.unique)){
fit <- Mclust(L$eigen$vectors[actual_cluster == cl.unique[i],1], G = 1)
params.a <- sum(actual_cluster == cl.unique[i])/length(actual_cluster)
prob.mat[,i] <- dmvnorm(data = L$eigen$vectors[,1], mean = fit$parameters$mean, sigma = fit$parameters$variance$sigmasq)*params.a
}
prob.mat2 <- apply(prob.mat, 2, function(x) x/rowSums(prob.mat))
out.cl <- apply(prob.mat2, 1, function(x) which(x == max(x)))
out.cl[out.cl == 1] <- "Cluster 1"
out.cl[out.cl == 2] <- "Cluster 2"
df.frame <- data.frame(v = L$eigen$vectors[,1], colour = splatO$Group)
density.frame <- data.frame(d = prob.mat, x = L$eigen$vectors[,1])
cols <- brewer.pal(3, "Set2")
p <- ggplot() + geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..)), binwidth = 0.004, position = "identity", alpha = 0.5) +
scale_fill_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..)), binwidth = 0.004, position = "identity", alpha = 0.5, size = 2) +
scale_fill_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..)), binwidth = 0.004, position = "identity", alpha = 0.5, size = 5) +
scale_fill_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..)), binwidth = 0.004, position = "identity", alpha = 0.8, size = 5) +
scale_fill_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.8, size = 5) +
scale_fill_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.8, size = 1) +
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.5, size = 0.5) +
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.5, size = 0.3) +
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.7, size = 0.3) +
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
p <- ggplot() +
geom_histogram(data=df.frame, aes(fill = colour, x = v, y=250*(..count..)/sum(..count..), colour = colour), binwidth = 0.004, position = "identity", alpha = 0.65, size = 0.3) +
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
geom_line(data=density.frame, aes(x = x, y = d.1), col = "forestgreen", size = 0.7, alpha = 1) +
geom_line(data=density.frame, aes(x = x, y = d.2), col = "firebrick1", size = 0.7, alpha = 1) + labs(fill = "") +
xlab("Singular vector 1") + ylab("Density / Relative Frequency")+
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 1),
keywidth=0.3,
keyheight=0.3,
default.unit="cm"), ncol = 1) +
theme_classic(base_size = 6
) %+replace%
theme(legend.position = "none",
legend.spacing.x = unit(0.1, "cm"),
axis.title = element_text(family = "Arial"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey90", size = 0.05),
axis.text = element_text(family = "Arial", colour = "black"),
panel.background = element_rect(fill = "transparent",colour = NA),
legend.text = element_text(size = 7, family = "Arial"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
legend.background = element_rect(fill = "transparent", colour = NA))
cairo_pdf("plots/FigureS1A/ari_fit.pdf", width = 10/2.54, height = 5/2.54, family = "Helvetica", bg = "transparent")
print(p)
dev.off()
library(Seurat)
?NormalizeData
?quickCluster
load("Documents/R/NACC/data/Benchmark/raw/mRNAmix_qc.RData")
setwd("~")
load("Documents/R/NACC/data/Benchmark/raw/mRNAmix_qc.RData")
sce2_qc$mix
A <- counts(sce2_qc)
A[1:5, 1:5]
group.prob <- seq(0.1, 0.95, length.out = 5)
group.prob <- group.prob/sum(group.prob)
group.prob
sum(c(0.65, 0.2, 0.15))
library(splatter)
?splatter
?FindNeighbors
?hclust
library(ROGUE)
?rogue
?CalculateRogue
?umap
library(splatter)
?SplatParams
load("~/surfdrive/Shared/crecn/data_to_analyse/fetal_kidney/measure_obj_18_12_2020-withclusters_MH.rda")
table(A$input_parameters$clusters)
table(A$sub_clusters$UBCD$cluster2)
table(A$sub_clusters$ICa$cluster1)
table(A$sub_clusters$SSBpr$cluster1)
#UMAP High Measure 1
umap.plot <- data.frame(A$rmt_out$ICa$eigen$vectors, cluster = A$sub_clusters$ICa$cluster1)
umap.plot$cluster <- as.character(umap.plot$cluster)
umap.plot$cluster <- as.character(umap.plot$cluster)
umap.plot$cluster[umap.plot$cluster == "0"] <- "Medullary IC"
umap.plot$cluster[umap.plot$cluster == "1"] <- "Cortical IC"
umap.plot$cluster[umap.plot$cluster == "2"] <- "Mis-classified cells"
umap.plot$cluster[umap.plot$cluster == "3"] <- "Stressed IC"
umap.plot$cluster[umap.plot$cluster == "4"] <- "Mesangial cells"
table(umap.plot$cluster)
umap.plot <- data.frame(A$rmt_out$UBCD$eigen$vectors, cluster = A$sub_clusters$UBCD$cluster2)
umap.plot$cluster <- as.character(umap.plot$cluster)
umap.plot$cluster[umap.plot$cluster == "1"] <- "Ureteric epithelium"
umap.plot$cluster[umap.plot$cluster == "0"] <- "UBCD"
table(umap.plot$cluster)
#Highest measure 3
umap.plot <- data.frame(A$rmt_out$SSBpr$eigen$vectors, cluster = A$sub_clusters$SSBpr$cluster1)
umap.plot$cluster <- as.character(umap.plot$cluster)
umap.plot$cluster[umap.plot$cluster == "0"] <- "Proximal Progenitors"
umap.plot$cluster[umap.plot$cluster == "1"] <- "PEC Progenitors"
umap.plot$cluster[umap.plot$cluster == "2"] <- "Distal Progenitors (mis-classified)"
table(umap.plot$cluster)
#UBCD
write.table(A$DEgenes$UBCD$cluster2[A$DEgenes$UBCD$cluster2$cluster == "1",][1:100,], file = "~/Documents/R/NACC/paper/DElist/UBCD_Ureteric_epithelium.txt")
load("~/surfdrive/Shared/crecn/data_to_analyse/fetal_kidney/measure_obj_18_12_2020-withclusters_MH.rda")
#UBCD
write.table(A$DEgenes$UBCD$cluster2[A$DEgenes$UBCD$cluster2$cluster == "1",][1:100,], file = "~/Documents/R/NACC/paper/DElist/UBCD_Ureteric_epithelium.txt")
#UBCD
write.table(A$DEgenes$UBCD$cluster2[A$DEgenes$UBCD$cluster2$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/UBCD_Ureteric_epithelium.txt", quote = F, row.names = F)
write.table(A$DEgenes$UBCD$cluster2[A$DEgenes$UBCD$cluster2$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/UBCD_UBCD.txt", quote = F, row.names = F)
#SSBpr
write.table(A$DEgenes$SSBpr$cluster[A$DEgenes$SSBpr$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_Proximal_Progenitors.txt", quote = F, row.names = F)
A$DEgenes$SSBpr$cluster
#SSBpr
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_Proximal_Progenitors.txt", quote = F, row.names = F)
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_PECs.txt", quote = F, row.names = F)
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_Distal_Progenitors_(mis-classified).txt", quote = F, row.names = F)
#ICa
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Medullary_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Cortical_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Mis-classified_cells.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "3",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Stressed_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "4",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Mesangial_cells.txt", quote = F, row.names = F)
#BMNC
rm(A)
load("~/Documents/R/NACC/data/BigPBMC/measure_obj_27_01_2021-withclusters.rda")
#Prog_RBC
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage1.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage2a.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage2b.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "3",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage3.txt", quote = F, row.names = F)
#Prog_DC
write.table(A2$DEgenes$Prog_DC[A2$DEgenes$Prog_DC$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_DC_cDC_progenitors.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_DC[A2$DEgenes$Prog_DC$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_DC_pDC_progenitors.txt", quote = F, row.names = F)
browseVignettes("Seurat")
library(Seurat)
browseVignettes("Seurat")
vignette("Seurat")
?Seurat
browseVignettes("Seurat-package")
browseVignettes("Seurat")
demo(Seurat)
browseVignettes("Seurat")
vignette("pbmc3k_tutorial.Rmd")
R.Version()
?ROGUE
??ROGUE
library(ROGUE)
?ROGUE
?rogue
11.4 + 152+42+80+96+61+80
522.4/40
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
library(splatter)
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
library(SIGMA)
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
#Create toy example of a data set
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
plot_all_sigmas(out)
debugSource('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
debugSource('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
debugSource('~/Documents/R/NACC/R/RMTfunctions/test_r2.R', echo=TRUE)
plot_all_sigmas(out)
detach("package:SIGMA", unload=TRUE)
debugSource('~/Documents/R/NACC/R/RMTfunctions/test_r2.R', echo=TRUE)
plot_all_sigmas(out)
debugSource('~/Documents/R/NACC/R/RMTfunctions/test_r2.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
source('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
debugSource('~/Documents/R/NACC/R/RMTfunctions/test_r2.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
r2vals
r2vals[r2vals < 0] <- 0
r2vals
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
plot_all_sigmas(out)
source('~/Documents/R/NACC/SIGMA/R/plot_all_sigmas.R', echo=TRUE)
plot_all_sigmas(out)
library(ggplot2)
plot_all_sigmas(out)
out$maximum_measure
source('~/Documents/R/NACC/R/RMTfunctions/test_r2.R', echo=TRUE)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
out$maximum_measure
setwd("Documents/R/NACC/SIGMA/")
getwd()
devtools::document()
devtools::document()
devtools::check()
