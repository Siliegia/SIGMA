#SSBpr
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_Proximal_Progenitors.txt", quote = F, row.names = F)
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_PECs.txt", quote = F, row.names = F)
write.table(A$DEgenes$SSBpr[A$DEgenes$SSBpr$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/SSBpr_Distal_Progenitors_(mis-classified).txt", quote = F, row.names = F)
#ICa
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Medullary_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Cortical_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Mis-classified_cells.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "3",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Stressed_IC.txt", quote = F, row.names = F)
write.table(A$DEgenes$ICa[A$DEgenes$ICa$cluster == "4",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/ICa_Mesangial_cells.txt", quote = F, row.names = F)
#BMNC
rm(A)
load("~/Documents/R/NACC/data/BigPBMC/measure_obj_27_01_2021-withclusters.rda")
#Prog_RBC
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage1.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage2a.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "2",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage2b.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_RBC[A2$DEgenes$Prog_RBC$cluster == "3",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_RBC_Stage3.txt", quote = F, row.names = F)
#Prog_DC
write.table(A2$DEgenes$Prog_DC[A2$DEgenes$Prog_DC$cluster == "0",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_DC_cDC_progenitors.txt", quote = F, row.names = F)
write.table(A2$DEgenes$Prog_DC[A2$DEgenes$Prog_DC$cluster == "1",][1:100,1:3], file = "~/Documents/R/NACC/paper/DElist/Prog_DC_pDC_progenitors.txt", quote = F, row.names = F)
browseVignettes("Seurat")
library(Seurat)
browseVignettes("Seurat")
vignette("Seurat")
?Seurat
browseVignettes("Seurat-package")
browseVignettes("Seurat")
demo(Seurat)
browseVignettes("Seurat")
vignette("pbmc3k_tutorial.Rmd")
R.Version()
?ROGUE
??ROGUE
library(ROGUE)
?ROGUE
?rogue
11.4 + 152+42+80+96+61+80
522.4/40
library(SIGMA)
data("stress_genes")
data("ribosomal_genes")
devtools::install_github("Siliegia/SIGMA")
library(SIGMA)
data(stress_genes)
data("stress_genes")
stress.genes
data("ribosomal_genes")
data("ribosomal_genes")
rb.genes
load("/Users/maria/Downloads/stress_genes.rda")
stress.genes
stress.genes <- as.character(stress.genes)
save(stress.genes, file = "Documents/R/NACC/SIGMA/data/stress_genes.rda")
setwd("Documents/R/NACC/SIGMA")
setwd("~/Documents/R/NACC/SIGMA/")
devtools::document()
devtools::document()
detach("package:SIGMA", unload=TRUE)
devtools::document()
devtools::install_github("Siliegia/SIGMA")
stress.genes
library(Seurat)
?CellCycleScoring
nuild()
library(devtools)
build()
document()
check()
library(SIGMA)
library(ggplot2)
library(Seurat)
data("force_gr_kidney")
data("sce_kidney")
paga.coord$Group <- sce_kidney$cell.type
ggplot(paga.coord, aes(x = V1, y = V2, colour = Group)) +
geom_point(shape = 16)
#Load kidney data from package
#Extract scran normalized counts and log-transform
expr.norm.log <- as.matrix(log(assay(sce_kidney, "scran")+1))
#Change the name of the rows to readable gene names
rownames(expr.norm.log) <- as.character(rowData(sce_kidney)$HUGO)
rownames(sce_kidney) <- as.character(rowData(sce_kidney)$HUGO)
#Creating Seurat object
cnts <- counts(sce_kidney)
colnames(cnts) <- 1:ncol(cnts)
rownames(cnts) <- as.character(rowData(sce_kidney)$HUGO)
fetalkidney <- CreateSeuratObject(cnts)
fetalkidney <- NormalizeData(fetalkidney)
#Cell cycle analysis
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
fetalkidney <- CellCycleScoring(fetalkidney, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
#Determining the expression of MT-genes, Rb-genes and stress genes:
data("ribosomal_genes")
data("stress_genes")
rb <- rownames(fetalkidney) %in% rb.genes
stress.genes <- intersect(stress.genes, rownames(expr.norm.log))
#Creating the final data frame with all the factors to be excluded from considering while calculating the clusterability measure:
exclude <- data.frame(clsm = log(colSums(cnts) + 1), cellcycle = fetalkidney$G2M.Score,
mt = colMeans(expr.norm.log[grep("^MT-", rownames(expr.norm.log)),]),
ribosomal = colMeans(expr.norm.log[rb,]), stress = colMeans(expr.norm.log[stress.genes,]))
dim(expr.norm.log)
length(sce_kidney$cell.type)
yable(sce_kidney$cell.type)
table(sce_kidney$cell.type)
dim(exclude)
#Main funcion SIGMA
out_kidney <- sigma_funct(expr.norm.log, clusters = sce_kidney$cell.type, exclude = exclude)
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
#Main funcion SIGMA
out_kidney <- sigma_funct(expr.norm.log, clusters = sce_kidney$cell.type, exclude = exclude)
#Evaluate the output of the measure
#plot all values for sigma
plot_sigma(out_kidney)
#Plot all values for sigma and g_sigma
plot_all_sigmas(out_kidney)
plot_all_g_sigmas(out_kidney)
#obtain the values for sigma and additional information
get_info(out_kidney, "UBCD")
#See which genes cause variances in the data
get_var_genes(out_kidney, "UBCD")[,1:3]
#Check if the MP distribution fits to the data
plot_MP(out_kidney, "UBCD")
#Plot clusters
plot_singular_vectors(out_kidney, "UBCD", colour = sce_kidney@metadata$ubcd.cluster)
#Plot variance driving genes
plot_singular_vectors(out_kidney, "UBCD", colour = "UPK1A", scaled = FALSE)
document()
document()
check()
build()
setwd"~"
setwd("~")
devtools::install_github("Siliegia/SIGMA")
source('~/Documents/R/NACC/R/kidney/new_run_SIGMA_2021_09_03.R', echo=TRUE)
library(scran)
expr.norm.log <- as.matrix(log(assay(sce_kidney, "scran")+1))
#Change the name of the rows to readable gene names
rownames(expr.norm.log) <- as.character(rowData(sce_kidney)$HUGO)
rownames(sce_kidney) <- as.character(rowData(sce_kidney)$HUGO)
#Creating Seurat object
cnts <- counts(sce_kidney)
colnames(cnts) <- 1:ncol(cnts)
rownames(cnts) <- as.character(rowData(sce_kidney)$HUGO)
fetalkidney <- CreateSeuratObject(cnts)
#> Warning: Non-unique features (rownames) present in the input matrix, making unique
#> Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
fetalkidney <- NormalizeData(fetalkidney)
#Cell cycle analysis
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
fetalkidney <- CellCycleScoring(fetalkidney, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
#Determining the expression of MT-genes, Rb-genes and stress genes:
data("ribosomal_genes")
data("stress_genes")
rb <- rownames(fetalkidney) %in% rb.genes
stress.genes <- intersect(stress.genes, rownames(expr.norm.log))
#Creating the final data frame with all the factors to be excluded from considering while calculating the clusterability measure:
exclude <- data.frame(clsm = log(colSums(cnts) + 1), cellcycle = fetalkidney$G2M.Score,
mt = colMeans(expr.norm.log[grep("^MT-", rownames(expr.norm.log)),]),
ribosomal = colMeans(expr.norm.log[rb,]), stress = colMeans(expr.norm.log[stress.genes,]))
out_kidney <- sigma_funct(expr.norm.log, clusters = sce_kidney$cell.type, exclude = exclude)
head(out$all_info)
library(SIGMA)
setwd("~")
getwd()
setwd("~")
N <- 500
M <- 10000
X <- rpois(N*M, 1)
X <- matrix(rpois(N*M, 1), ncol = N)
dim(X)
v1 <- c(rep( 1, N/10), rep(1, N/10), rep(-1, N*8/10))
v1 <- v1/sqrt(sum(v1^2))
plot(v1)
v1 <- c(rep( 1, N/3), rep(-1, N*2/10))
v1 <- v1/sqrt(sum(v1^2))
plot(v1)
N*2/3
N <- 501
M <- 10000
X <- matrix(rpois(N*M, 1), ncol = N)
N/3
N*2/3
v1 <- c(rep( 1, N/3), rep(-1, N*2/3))
v1 <- v1/sqrt(sum(v1^2))
plot(v1)
devtools::install_github("Siliegia/SIGMA")
?set.seed
library(devtools)
document()
check()
document()
document()
check()
check()
document()
check()
document()
check()
document()
check()
library(devtools)
document()
build()
check()
library(devtools)
document()
build()
check()
document()
build()
check()
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
library(splatter)
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
u.cl
pvals.mp
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
pvals.mp
u.cl
debugSource('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
u.cl
pvals.mp
rmt.list$Group2$p.value_mp_fit
rmt.list$Group1$p.value_mp_fit
debugSource('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
debugSource('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
expr.scale <- t(scale(t(expr.norm.log)))
L <- fit_mp(expr.scale)
debugSource('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
L <- fit_mp(expr.scale)
fit_mp <- function(expr, sample = FALSE, cor = TRUE, nu = 50, p.val = 0.01){
N <- ncol(expr)
p.val.thres <- p.val
cat("Calculating svd ...", "\n")
if(cor){
svd.expr <- svd(scale(expr, scale = TRUE), nv = N, nu = nu)
}else{
svd.expr <- svd(scale(expr, scale = FALSE), nv = N, nu = nu)
}
M <- nrow(expr)
s <- list()
s[["values"]] <- c((svd.expr$d^2)/(M-1), rep(0, N-length(svd.expr$d)))
s[["vectors"]] <- svd.expr$v
s[["scores"]] <- svd.expr$u
ind <- order(s$values)
eigvals <- s$values[ind]
V <- s$vectors[,ind]
sigma <- 1 - (max(s$values)/sum(s$values))
#cat("Scaled by: ", sigma, "\n")
Q <- M/N
if(!sample){
#Maximum eigenval
RMTmaxEig <- (mean(s$values))*sigma*(1 + (1/Q) + 2*sqrt(1/Q))
RMTminEig <- (mean(s$values))*sigma*(1 + (1/Q) - 2*sqrt(1/Q))
}else{
out <- unlist(lapply(1:20, function(x) random_sampling(expr)))
RMTmaxEig <- quantile(out[grep("max", names(out))], prob = 0.99)
RMTminEig <- quantile(out[grep("min", names(out))], prob = 0.01)
}
tw <- tracy_widom(N, M)
#Minimum eigenval
RMTminIndex <- which(eigvals < RMTminEig)
RMTminIndex <- tail(RMTminIndex, 1)
#Calculating p-value
r2 <- s$values[s$values >= RMTminEig & s$values <= RMTmaxEig]
r <- sigma*rmp(1000, ndf = M, pdim = N)
p.val.mp <- ks.test(r, r2)$p.value
#Calculating transcriptome mode
transcriptome_mode <- which(colSums(V>0) == 0 | colSums(V<0) == 0)
cat("Market Mode: ", N + 1 - transcriptome_mode, "\n")
#Critical eigenvalue
RMTmaxIndex <- which(eigvals > tw)
if (isEmpty(RMTmaxIndex)){
out <- list(eigen = s, maxEigen = RMTmaxEig, minEigen = RMTminEig, sig_vectors = c(),
M = M, N = N, svd = svd.expr, genes.used = c(), p.value_mp_fit = p.val.mp, transcriptome_mode = transcriptome_mode,
input_parameters = list(sample = sample, cor = cor, expr = expr))
return(out)
}else{
RMTmaxIndex <- RMTmaxIndex[1]}
#Check loacalisation of eigenvectors above Marchenko-Pastur
to.test <- N:RMTmaxIndex
if(isEmpty(to.test)){
out <- list(eigen = s, maxEigen = RMTmaxEig, minEigen = RMTminEig, sig_vectors = c(),
M = M, N = N, svd = svd.expr, genes.used = c(), p.value_mp_fit = p.val.mp, transcriptome_mode = transcriptome_mode,
input_parameters = list(sample = sample, cor = cor, expr = expr))
return(out)
}
if(length(to.test) <= 5){
passed_test <- c(0)
}else if(length(to.test) <= 10 & length(to.test) > 5){
passed_test <- c(1 : (length(to.test) - 5))
}else{
passed_test <- c(1 : (round((length(to.test))*0.5) - 1))
}
vec.to.test <- V[,to.test, drop = FALSE]
rmt_indices <- to.test
for(i in (max(passed_test)+1):dim(vec.to.test)[2]){
if(length(vec.to.test[,i]) > 5000){
p.val <- shapiro.test(vec.to.test[sample(1:nrow(vec.to.test), size = 5000),i])$p.value
passed_test <- c(passed_test, if(p.val < p.val.thres) i )
}else{
p.val <- shapiro.test(vec.to.test[,i])$p.value
passed_test <- c(passed_test, if(p.val < p.val.thres) i )}
}
out <- list(eigen = s, maxEigen = RMTmaxEig, minEigen = RMTminEig, sig_vectors = (N - c(rmt_indices[passed_test])+1), M = M,
N = N, svd = svd.expr, genes.used = rownames(expr), p.value_mp_fit = p.val.mp,
transcriptome_mode = N - transcriptome_mode + 1, input_parameters = list(sample = sample, cor = cor, expr = expr))
return(out)
}
L <- fit_mp(expr.scale)
debugSource('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
source('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
source('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
L <- fit_mp(expr.scale)
L$sig_vectors
table(splatO$Group)
source('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
table(splatO$Group)
L <- fit_mp(expr.scale)
debugSource('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
pvals.mp
pvals.mp
document()
build()
document()
build()
check()
debugSource('~/Documents/R/NACC/SIGMA/R/fit_mp.R', echo=TRUE)
library(splatter)
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
expr.scale <- t(scale(t(expr.norm.log)))
L <- fit_mp(expr.scale)
library(RMTstat)
L <- fit_mp(expr.scale)
L$p.value_mp_fit
library(devtools)
document()
build()
check()
library(devtools)
document()
build()
check()
library(devtools)
?rnorm
?set.seed
document()
document()
build()
check()
?mclapply
document()
build()
check()
document()
build()
document()
build()
check()
library(devtools)
document()
build()
check()
library(devtools)
document()
build()
library(devtools)
document()
build()
document()
build()
document()
build()
source('~/Documents/R/NACC/SIGMA/R/sigma_function.R', echo=TRUE)
library(SIGMA)
library(splatter)
library(ggplot2)
#Load sample data simulated with splatter
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
#Create toy example of a data set
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
out$sigma
out$g_sigma
#Evaluate the output of the measure
#plot all values for sigma
plot_sigma(out)
#Plot all values for sigma and g_sigma
plot_all_sigmas(out)
source('~/Documents/R/NACC/SIGMA/R/plot_all_sigmas.R', echo=TRUE)
source('~/Documents/R/NACC/SIGMA/R/plot_G_SIGMA.R', echo=TRUE)
#Plot all values for sigma and g_sigma
plot_all_sigmas(out)
plot_all_g_sigmas(out)
#obtain the values for sigma and additional information
get_info(out, "Group2")
#See which genes cause variances in the data
get_var_genes(out, "Group2")
#Check if the MP distribution fits to the data
plot_MP(out, "Group2")
#Plot clusters
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
#Plot variance driving genes
plot_singular_vectors(out, "Group2", colour = "Gene401")
document()
build()
check()
source('~/Documents/R/NACC/SIGMA/R/plot_all_sigmas.R', echo=TRUE)
library(SIGMA)
library(splatter)
library(ggplot2)
#Load sample data simulated with splatter
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
#Create toy example of a data set
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
#Evaluate the output of the measure
#plot all values for sigma
plot_sigma(out)
out$sigma
order(out$sigma)
#Plot all values for sigma and g_sigma
plot_all_sigmas(out)
plot_all_g_sigmas(out)
data("out")
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)), confidence = T)
#Evaluate the output of the measure
#plot all values for sigma
plot_sigma(out)
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
save(out, file = "data/out.rda")
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
document()
check()
library(SIGMA)
library(splatter)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#Load sample data simulated with splatter
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
#Create toy example of a data set
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster,
exclude = data.frame(clsm = log(colSums(expr) + 1)))
out$p.val.mp.fit
table(out$input_parameters$clusters)
