?ggplot2
devtools::document()
devtools::document()
devtools::document()
R.Version()
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
library(SIGMA)
?plot_all_g_sigmas
?sigma_funct
detach("package:SIGMA", unload=TRUE)
devtools::document()
devtools::install()
library(SIGMA)
devtools::load_all()
?sigma_funct
remove.packages("SIGMA")
devtools::document()
devtools::load_all()
?sigma_funct
devtools::document()
devtools::load_all()
?sigma_funct
devtools::document()
devtools::load_all()
?sigma_funct
?get_info
devtools::document()
library(splatter)
group.prob <- c(0.1, 0.2, 0.3, 0.4)
group.prob <- group.prob/sum(group.prob)
params <- newSplatParams()
params <- setParams(params, update = list(nGenes = 1000, batchCells = 500, group.prob = group.prob, path.nonlinearProb = 0, out.prob = 0.1,
dropout.type = "none", lib.loc = 11, de.downProb = 0.5,
de.prob = 0.03, seed = 3, de.facLoc = 0.1))
splatO <- splatSimulateGroups(params)
devtools::load_all()
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
out <- sigma_funct(expr = expr.norm.log, clusters = splatO$Group, exclude = data.frame(clsm = log(colSums(expr) + 1)))
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = splatO$Group, exclude = data.frame(clsm = log(colSums(expr) + 1)))
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = splatO$Group, exclude = data.frame(clsm = log(colSums(expr) + 1)))
test.cluster <- splatO$Group
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
params <- setParams(params, update = list(nGenes = 1000, batchCells = 500, group.prob = group.prob, path.nonlinearProb = 0, out.prob = 0.1,
dropout.type = "none", lib.loc = 11, de.downProb = 0.5,
de.prob = 0.05, seed = 3, de.facLoc = 0.1))
splatO <- splatSimulateGroups(params)
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_all_sigmas(out)
library(ggplot2)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_MP(out, "Group2")
devtools::document()
devtools::load_all()
plot_MP(out, "Group2")
devtools::document()
devtools::load_all()
plot_MP(out, "Group2")
plot_vectors(out, "Group2")
plot_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
get_var_genes(out, "Group2")
plot_vectors(out, "Group2", colour = "Gene714")
devtools::document()
devtools::load_all()
get_info(out, "Group2")
get_var_genes(out, "Group2")
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_sigma(out)
group.prob <- c(0.1, 0.2, 0.3, 0.1, 0.3)
params <- newSplatParams()
params <- setParams(params, update = list(nGenes = 1000, batchCells = 500, group.prob = group.prob, path.nonlinearProb = 0, out.prob = 0.1,
dropout.type = "none", lib.loc = 11, de.downProb = 0.5,
de.prob = 0.05, seed = 3, de.facLoc = 0.1))
splatO <- splatSimulateGroups(params)
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_sigma(out)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_MP(out, "Group2")
plot_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
plot_singular_vectors(out, "Group2", colour = "Gene401")
get_info(out, "Group2")
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_sigma(out)
plot_all_sigmas(out)
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_sigma(out)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_MP(out, "Group2")
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
plot_singular_vectors(out, "Group2", colour = "Gene401")
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_sigma(out)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_MP(out, "Group2")
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
plot_singular_vectors(out, "Group2", colour = "Gene401")
plot_all_sigmas(out)
devtools::document()
devtools::load_all()
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
get_info(out, "Group2")
get_var_genes(out, "Group2")
plot_sigma(out)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_sigma(out)
plot_all_sigmas(out)
plot_all_g_sigmas(out)
plot_MP(out, "Group2")
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
plot_singular_vectors(out, "Group2", colour = "Gene401")
devtools::use_data(splatO)
usethis::use_data(splatO, out, internal = FALSE)
?usethis::use_data
usethat::use_vignette("Clusterability Measure")
usethis::use_vignette("Clusterability Measure")
usethis::use_vignette("Guide_to_sigma")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?splatter
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?quantile
?tail
?isEmpty
?shapiro.test
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?colorRampPalette
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?colorRampPalette
?rgb
?lm
devtools::document()
devtools::check()
?isEmpty
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?counts
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?isEmpty
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?..density..
devtools::document()
devtools::check()
?density
devtools::document()
devtools::document()
devtools::check()
library(rmarkdown)
render("README.Rmd", md_document(variant = "markdown_github"))
render("README.Rmd", md_document(variant = "markdown_github"))
render("README.Rmd", md_document(variant = "markdown_github"))
render("README.Rmd", md_document(variant = "markdown_github"))
render("README.Rmd", md_document(variant = "markdown_github"))
devtools::install_github("Siliegia/SIGMA")
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
data("out")
plot_all_g_sigmas(out)
devtools::document()
devtools::load_all()
plot_all_g_sigmas(out)
devtools::document()
devtools::check()
devtools::load_all()
plot_all_g_sigmas(out)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
library(SIGMA)
library(splatter)
library(ggplot2)
#Load sample data simulated with splatter
data("splatO")
expr <- counts(splatO)
expr <- expr[rowSums(expr)>0,]
#Normalize and log-transform the data
expr.norm <- t(t(expr)/colSums(expr))*10000
expr.norm.log <- log(expr.norm + 1)
#Create toy example of a data set
test.cluster <- as.character(splatO$Group)
test.cluster[test.cluster == "Group3"] <- "Group2"
test.cluster[test.cluster == "Group4"] <- "Group2"
#Main funcion that calculates the clusterability
out <- sigma_funct(expr = expr.norm.log, clusters = test.cluster, exclude = data.frame(clsm = log(colSums(expr) + 1)))
#Evaluate the output of the measure
#plot all values for sigma
plot_sigma(out)
#Plot all values for sigma and g_sigma
plot_all_sigmas(out)
plot_all_g_sigmas(out)
#obtain the values for sigma and additional information
get_info(out, "Group2")
#See which genes cause variances in the data
get_var_genes(out, "Group2")
#Check if the MP distribution fits to the data
plot_MP(out, "Group2")
#Plot clusters
plot_singular_vectors(out, "Group2", colour = splatO$Group[test.cluster == "Group2"])
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(SIGMA)
data("out")
devtools::install()
getwd()
devtools::document()
render("vignettes/Guide_to_sigma.Rmd", md_document(variant = "markdown_github"))
devtools::check()
1000*(0.1*10^-3)^5
8.9*10^-4 * (0.1*10^-3)^3
usethis::use_vignette("Analysis_kidney")
sce_kidney <- readRDS("../data/kidney/sce_stressless.rds")
devtools::use_data("sce_kidney")
usethis::use_data("sce_kidney")
save(sce_kidney, file = "data/sce_kidney.rda")
devtools::document()
devtools::document()
devtools::document()
rb.genes <- read.table("../markers/ribosomalGenes.txt")
rb.genes <- read.table("../markers/ribosomalGenes.txt", sep = "\t", header = T)
rb.genes <- as.character(as.character(rb.genes$Approved.Symbol))
save(rb.genes, file = "data/ribosomal_genes.rda")
stress.genes <- read.table("../markers/stress_marker.txt")
stress.genes <- stress.genes$V1
save(stress.genes, file = "data/stress_genes.rda")
paga.coord <- read.table("~/Documents/R/NACC/data/kidney/paga_plot_all.txt")
save(paga.coord, file = "data/force_gr_kidney.rda")
load("~/surfdrive/Shared/crecn/data_to_analyse/fetal_kidney/measure_obj_18_12_2020-withclusters_MH.rda")
sce <- readRDS("~/Documents/R/NACC/data/kidney/sce_stressless.rds")
sce_kidney@metadata <- A$sub_clusters$UBCD$cluster1
sce_kidney@metadata <- list(ubcd.cluster = A$sub_clusters$UBCD$cluster1)
table(A$sub_clusters$UBCD$cluster1)
sce_kidney@metadata <- list(ubcd.cluster = A$sub_clusters$UBCD$cluster2)
table(A$sub_clusters$UBCD$cluster2)
save(sce_kidney, file = "data/sce_kidney.rda")
sce_kidney@metadata$ubcd.cluster
devtools::document()
devtools::document()
load("data/force_gr_kidney.rda")
load("data/ribosomal_genes.rda")
load("data/stress_genes.rda")
devtools::document()
devtools::load_all()
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Guide_to_sigma.Rmd", md_document(variant = "markdown_github"))
render("vignettes/Analysis_kidney.Rmd", md_document(variant = "markdown_github"))
devtools::check()
devtools::check()
load("data/sce_kidney.rda")
devtools::document()
devtools::check()
6000L*20000L
dim(sce_kidney)
6602L*21892L
devtools::check()
devtools::check()
sce_kidney <- sce_kidney[,c("NPCa", "NPCb", "Mes", "CnT", "Pod", "ICa", "End", "ICb", "UBCD", "ErPrT", "SSBpr", "PTA") %in% sce_kidney$cell.type]
dim(sce_kidney)
sum(c("NPCa", "NPCb", "Mes", "CnT", "Pod", "ICa", "End", "ICb", "UBCD", "ErPrT", "SSBpr", "PTA") %in% sce_kidney$cell.type)
sce_kidney <- sce_kidney[,sce_kidney$cell.type %in% c("NPCa", "NPCb", "Mes", "CnT", "Pod", "ICa", "End", "ICb", "UBCD", "ErPrT", "SSBpr", "PTA")]
dim(sce_kidney)
load("data/sce_kidney.rda")
sce_kidney <- sce_kidney[,sce_kidney$cell.type %in% c("NPCa", "Mes", "CnT", "Pod", "ICa", "End", "ICb", "UBCD", "ErPrT", "SSBpr", "PTA")]
dim(sce_kidney)
sce_kidney <- sce_kidney[rowSums(counts(sce_kidney)>0),]
dim(sce_kidney)
save(sce_kidney, file = "data/sce_kidney.rda")
sce <- readRDS("../data/kidney/sce_stressless.rds")
paga.coord <- paga.coord[sce$cell.type %in% c("NPCa", "Mes", "CnT", "Pod", "ICa", "End", "ICb", "UBCD", "ErPrT", "SSBpr", "PTA"),]
dim(paga.coord)
save(paga.coord, file = "data/force_gr_kidney.rda")
load("data/sce_kidney.rda")
dim(sce_kidney)
sce_kidney@assays$data$sm_counts <- NULL
sce_kidney@assays$data$sm_scran <- NULL
dim(sce_kidney)
save(sce_kidney, file = "data/sce_kidney.rda")
sce_kidney <- sce
dim(sce_kidney)
sce_kidney@assays$data$sm_counts <- NULL
sce_kidney@assays$data$sm_scran <- NULL
sce_kidney
head(sce)
head(colData(sce_kidney))
save(sce_kidney, file = "data/sce_kidney.rda")
paga.coord <- read.table("~/Documents/R/NACC/data/kidney/paga_plot_all.txt")
save(paga.coord, file = "data/force_gr_kidney.rda")
devtools::document()
devtools::check()
load("~/surfdrive/Shared/crecn/data_to_analyse/fetal_kidney/measure_obj_18_12_2020-withclusters_MH.rda")
sce_kidney@metadata$ubcd.cluster <- A$sub_clusters$UBCD$cluster2
save(sce_kidney, file = "data/sce_kidney.rda")
devtools::document()
devtools::check()
?Seurat
??Seurat
library(Seurat)
?Seurat
devtools::check()
devtools::document()
devtools::document()
devtools::check()
